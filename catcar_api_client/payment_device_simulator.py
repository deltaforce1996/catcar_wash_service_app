#!/usr/bin/env python3
"""
CatCar Wash Service - Payment Device Simulator
Simulator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô QR Code Payment
‡∏ï‡∏≤‡∏° specification ‡πÉ‡∏ô PLAN-COMUNICATION.md
"""

import requests
import paho.mqtt.client as mqtt
import json
import hashlib
import time
import threading
import sys
import qrcode
from typing import Dict, Optional
from enum import Enum
from datetime import datetime

# Secret key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö signature verification
SECRET_KEY = "modernchabackdoor"

class PaymentMethod(Enum):
    QR_PROMPT_PAY = "QR_PROMPT_PAY"

class PaymentStatus(Enum):
    PENDING = "PENDING"
    SUCCEEDED = "SUCCEEDED"
    FAILED = "FAILED"
    CANCELLED = "CANCELLED"

class PaymentDeviceSimulator:
    def __init__(self, 
                 device_id: str,
                 api_base_url: str = "http://localhost:3000/api/v1",
                 mqtt_broker: str = "localhost",
                 mqtt_port: int = 1883):
        """
        Initialize Payment Device Simulator
        
        Args:
            device_id: Device identifier
            api_base_url: Base URL ‡∏Ç‡∏≠‡∏á API server
            mqtt_broker: MQTT broker host
            mqtt_port: MQTT broker port
        """
        self.device_id = device_id
        self.api_base_url = api_base_url.rstrip('/')
        self.mqtt_broker = mqtt_broker
        self.mqtt_port = mqtt_port
        
        # HTTP Session
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })
        
        # MQTT Client
        self.mqtt_client = None
        self.mqtt_connected = False
        self.payment_status_received = False
        self.current_payment_status = None
        self.listening_charge_id = None
        
        # Payment data
        self.last_charge_id = None
        self.last_payment_data = None
        
    def _calculate_signature(self, payload: Dict) -> str:
        """
        ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì signature ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HTTP request
        
        Args:
            payload: Request payload
            
        Returns:
            str: SHA256 signature
        """
        # ‡πÅ‡∏õ‡∏•‡∏á payload ‡πÄ‡∏õ‡πá‡∏ô JSON string (‡πÑ‡∏°‡πà‡∏°‡∏µ whitespace)
        payload_string = json.dumps(payload, separators=(',', ':'), ensure_ascii=False)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì SHA256(payload + SECRET_KEY)
        combined = payload_string + SECRET_KEY
        signature = hashlib.sha256(combined.encode('utf-8')).hexdigest()
        
        return signature
    
    def _verify_mqtt_signature(self, mqtt_payload: Dict) -> bool:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature ‡∏à‡∏≤‡∏Å MQTT message
        
        Args:
            mqtt_payload: MQTT message payload (‡∏°‡∏µ field sha256)
            
        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤ signature ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        """
        if 'sha256' not in mqtt_payload:
            print("‚ö†Ô∏è  MQTT message ‡πÑ‡∏°‡πà‡∏°‡∏µ signature")
            return False
        
        received_signature = mqtt_payload.pop('sha256')
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì signature ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
        payload_string = json.dumps(mqtt_payload, separators=(',', ':'), ensure_ascii=False)
        combined = payload_string + SECRET_KEY
        expected_signature = hashlib.sha256(combined.encode('utf-8')).hexdigest()
        
        if received_signature != expected_signature:
            print(f"‚ö†Ô∏è  MQTT signature ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            print(f"   Expected: {expected_signature}")
            print(f"   Received: {received_signature}")
            return False
        
        return True
    
    def _on_mqtt_connect(self, client, userdata, flags, rc):
        """MQTT connection callback"""
        if rc == 0:
            self.mqtt_connected = True
            print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            self.mqtt_connected = False
            print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {rc}")
    
    def _on_mqtt_disconnect(self, client, userdata, rc):
        """MQTT disconnection callback"""
        self.mqtt_connected = False
        if rc != 0:
            print(f"‚ö†Ô∏è  MQTT broker disconnected: {rc}")
    
    def _on_mqtt_message(self, client, userdata, msg):
        """MQTT message callback"""
        try:
            # Parse JSON message
            payload = json.loads(msg.payload.decode('utf-8'))
            
            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"\n[{timestamp}] üì® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö MQTT message ‡∏à‡∏≤‡∏Å topic: {msg.topic}")
            print(f"üìã Payload: {json.dumps(payload, indent=2, ensure_ascii=False)}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature
            payload_copy = payload.copy()
            # if not self._verify_mqtt_signature(payload_copy):
            #     print("‚ùå Signature verification ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò message")
            #     return
            
            print("‚úÖ Signature verification ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô payment status message ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if 'command' in payload and payload['command'] == 'PAYMENT':
                payment_payload = payload.get('payload', {})
                charge_id = payment_payload.get('chargeId')
                status = payment_payload.get('status')
                
                if charge_id and status:
                    print(f"üí≥ Payment Status Update:")
                    print(f"   Charge ID: {charge_id}")
                    print(f"   Status: {status}")
                    
                    self.current_payment_status = status
                    self.payment_status_received = True
                    
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô final status ‡πÉ‡∏´‡πâ unsubscribe
                    if status in ['SUCCEEDED', 'FAILED', 'CANCELLED']:
                        print(f"üèÅ Payment {status} - ‡∏´‡∏¢‡∏∏‡∏î listening")
                        if self.listening_charge_id:
                            self.mqtt_client.unsubscribe(f"device/{self.listening_charge_id}/payment-status")
                            self.listening_charge_id = None
            
        except json.JSONDecodeError as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse MQTT message ‡πÑ‡∏î‡πâ: {e}")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• MQTT message: {e}")
    
    def connect_mqtt(self) -> bool:
        """
        ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MQTT broker
        
        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        """
        if self.mqtt_client and self.mqtt_connected:
            print("‚úÖ MQTT broker ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return True
        
        try:
            print(f"üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker: {self.mqtt_broker}:{self.mqtt_port}")
            
            self.mqtt_client = mqtt.Client()
            self.mqtt_client.on_connect = self._on_mqtt_connect
            self.mqtt_client.on_disconnect = self._on_mqtt_disconnect
            self.mqtt_client.on_message = self._on_mqtt_message
            
            self.mqtt_client.connect(self.mqtt_broker, self.mqtt_port, 60)
            self.mqtt_client.loop_start()
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            time.sleep(2)
            
            return self.mqtt_connected
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker ‡πÑ‡∏î‡πâ: {e}")
            return False
    
    def disconnect_mqtt(self):
        """‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker"""
        if self.mqtt_client:
            self.mqtt_client.loop_stop()
            self.mqtt_client.disconnect()
            self.mqtt_connected = False
            print("üîå ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker ‡πÅ‡∏•‡πâ‡∏ß")
    
    def create_payment(self, amount: int, payment_method: PaymentMethod = PaymentMethod.QR_PROMPT_PAY, 
                      description: str = "Car wash payment", auto_listen: bool = False, 
                      timeout: int = 8) -> Optional[Dict]:
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á payment request ‡πÅ‡∏•‡∏∞ auto listen payment status (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        
        Args:
            amount: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (satang - ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏¢‡πà‡∏≠‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏≤‡∏ó ‡πÄ‡∏ä‡πà‡∏ô 100 = 1.00 ‡∏ö‡∏≤‡∏ó)
            payment_method: ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            description: ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
            auto_listen: ‡∏ñ‡πâ‡∏≤ True ‡∏à‡∏∞ listen payment status ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            timeout: Timeout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto listen (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
            
        Returns:
            Dict: Payment response ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        """
        url = f"{self.api_base_url}/payment-gateway/payments"
        
        payload = {
            "device_id": self.device_id,
            "amount": amount,
            "payment_method": payment_method.value,
            "description": description
        }
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì signature
        signature = self._calculate_signature(payload)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° signature ‡πÉ‡∏ô header
        headers = {
            'x-signature': signature
        }
        
        try:
            print(f"\nüì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á payment request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á: {url}")
            print(f"üìã Device ID: {self.device_id}")
            print(f"üí∞ Amount: {amount} satang ({amount/100:.2f} ‡∏ö‡∏≤‡∏ó)")
            print(f"üí≥ Payment Method: {payment_method.value}")
            print(f"üìù Description: {description}")
            print(f"üîê Signature: {signature}")
            
            response = self.session.post(url, json=payload, headers=headers)
            
            print(f"üìä Status Code: {response.status_code}")
            
            if 200 <= response.status_code <= 299:
                result = response.json()
                
                print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á payment ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                
                # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payment
                self.last_payment_data = result['data']
                self.last_charge_id = result['data'].get('id')
                
                payment_results = result['data'].get('payment_results', {})
                charge_id = payment_results.get('chargeId')
                encoded_image = payment_results.get('encodedImage', {})
                
                print(f"\nüí≥ Payment Information:")
                print(f"   Payment ID: {result['data'].get('id')}")
                print(f"   Charge ID: {charge_id}")
                print(f"   Reference ID: {result['data'].get('reference_id')}")
                print(f"   Status: {result['data'].get('status')}")
                print(f"   Amount: {result['data'].get('amount')}")
                
                if encoded_image:
                    print(f"\nüì± QR Code Information:")
                    print(f"   Expiry: {encoded_image.get('expiry')}")
                    raw_data = encoded_image.get('rawData')
                    if raw_data:
                        print(f"   Raw Data: {raw_data[:50]}...")
                        # ‡πÅ‡∏™‡∏î‡∏á QR Code
                        self._display_qr_code(raw_data)
                
                # Auto listen payment status
                if auto_listen and charge_id:
                    print(f"\nüîÑ Auto listening payment status...")
                    status = self.listen_payment_status(charge_id, timeout)
                    
                    if status:
                        print(f"\n‚úÖ Payment {status}")
                        if status == PaymentStatus.SUCCEEDED.value:
                            print("üéâ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                        elif status == PaymentStatus.FAILED.value:
                            print("‚ùå ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                        elif status == PaymentStatus.CANCELLED.value:
                            print("üö´ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
                    else:
                        # Timeout - Fallback to HTTP
                        print("\n‚è∞ Timeout - Fallback ‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô HTTP...")
                        self.check_payment_status(charge_id)
                    
                    print("\n‚úÖ Payment session ‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                
                return result
            else:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response.status_code}")
                print(f"üìù Response: {response.text}")
                return None
                
        except requests.exceptions.ConnectionError:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö server ‡πÑ‡∏î‡πâ")
            print(f"üîó ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà: {self.api_base_url}")
            return None
        except requests.exceptions.RequestException as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á request: {e}")
            return None
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return None
    
    def _display_qr_code(self, data: str):
        """
        ‡πÅ‡∏™‡∏î‡∏á QR Code ‡πÉ‡∏ô terminal
        
        Args:
            data: QR code data string
        """
        try:
            print("\n" + "="*60)
            print("üì± QR CODE - ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
            print("="*60)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á QR code
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=1,
                border=2,
            )
            qr.add_data(data)
            qr.make(fit=True)
            
            # ‡πÅ‡∏™‡∏î‡∏á QR code ‡πÉ‡∏ô terminal
            qr.print_ascii(invert=True)
            
            print("="*60)
            
        except Exception as e:
            print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á QR Code ‡πÑ‡∏î‡πâ: {e}")
            print(f"üí° QR Data: {data}")
    
    def listen_payment_status(self, charge_id: str, timeout: int = 120) -> Optional[str]:
        """
        Listen payment status ‡∏à‡∏≤‡∏Å MQTT
        
        Args:
            charge_id: Charge ID ‡∏à‡∏≤‡∏Å payment response
            timeout: Timeout ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            
        Returns:
            str: Payment status ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤ timeout
        """
        if not self.mqtt_connected:
            print("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker")
            if not self.connect_mqtt():
                return None
        
        topic = f"device/{charge_id}/payment-status"
        
        print(f"\nüì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á listen payment status ‡∏à‡∏≤‡∏Å MQTT")
        print(f"üìã Topic: {topic}")
        print(f"‚è±Ô∏è  Timeout: {timeout} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        # Reset status
        self.payment_status_received = False
        self.current_payment_status = None
        self.listening_charge_id = charge_id
        
        # Subscribe to topic
        self.mqtt_client.subscribe(topic)
        print(f"‚úÖ Subscribe topic ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏£‡∏≠‡∏£‡∏±‡∏ö message
        start_time = time.time()
        while not self.payment_status_received and (time.time() - start_time) < timeout:
            elapsed = int(time.time() - start_time)
            remaining = timeout - elapsed
            
            if elapsed % 10 == 0 and elapsed > 0:
                print(f"‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠ payment status... (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
            
            time.sleep(1)
        
        # Unsubscribe
        self.mqtt_client.unsubscribe(topic)
        self.listening_charge_id = None
        
        if self.payment_status_received:
            print(f"\n‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö payment status: {self.current_payment_status}")
            return self.current_payment_status
        else:
            print(f"\n‚è∞ Timeout - ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö payment status ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô {timeout} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            return None
    
    def check_payment_status(self, charge_id: str) -> Optional[Dict]:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payment status ‡∏ú‡πà‡∏≤‡∏ô HTTP (fallback)
        
        Args:
            charge_id: Charge ID ‡∏à‡∏≤‡∏Å payment response
            
        Returns:
            Dict: Payment status response ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        """
        url = f"{self.api_base_url}/payment-gateway/payments/{charge_id}/status"
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì signature (empty payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GET request)
        payload = {}
        signature = self._calculate_signature(payload)
        
        headers = {
            'x-signature': signature
        }
        
        try:
            print(f"\nüì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payment status ‡∏ú‡πà‡∏≤‡∏ô HTTP")
            print(f"üìã URL: {url}")
            print(f"üîê Signature: {signature}")
            
            response = self.session.get(url, headers=headers)
            
            print(f"üìä Status Code: {response.status_code}")
            
            if 200 <= response.status_code <= 299:
                result = response.json()
                
                print("‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payment status ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                
                charge_id = result['data'].get('chargeId')
                status = result['data'].get('status')
                
                print(f"\nüí≥ Payment Status:")
                print(f"   Charge ID: {charge_id}")
                print(f"   Status: {status}")
                
                return result
            else:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response.status_code}")
                print(f"üìù Response: {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return None


def show_menu(device_id: str):
    """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å"""
    print("\n" + "=" * 60)
    print("üí≥ CatCar Wash Service - Payment Device Simulator")
    print("=" * 60)
    print(f"üÜî Device ID: {device_id}")
    print("=" * 60)
    print("üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:")
    print("1. üí∞ Create Payment [QR + Auto Listen 15s] - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥!")
    print("2. üì° Listen Payment Status (MQTT) - ‡∏£‡∏≠‡∏£‡∏±‡∏ö payment status")
    print("3. üîç Check Payment Status (HTTP) - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payment status")
    print("4. üîÑ Create & Listen (Custom) - ‡∏™‡∏£‡πâ‡∏≤‡∏á payment ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á")
    print("5. üìä View Last Payment - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payment ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    print("6. üîó Connect MQTT - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker")
    print("7. üîå Disconnect MQTT - ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT")
    print("8. ‚öôÔ∏è  Change Settings - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    print("9. ‚ùå Exit - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    print("=" * 60)


def handle_create_payment(simulator: PaymentDeviceSimulator):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ command create payment (‡∏û‡∏£‡πâ‡∏≠‡∏° auto listen ‡πÅ‡∏•‡∏∞ QR code)"""
    print("\nüí∞ Create Payment (Auto Listen)")
    print("-" * 40)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MQTT connection
    if not simulator.mqtt_connected:
        print("üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker...")
        if not simulator.connect_mqtt():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker ‡πÑ‡∏î‡πâ")
            use_anyway = input("üí° ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á payment ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ MQTT ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ").strip().lower()
            if use_anyway != 'y':
                return
    
    try:
        amount_baht = input("üíµ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó): ").strip()
        if not amount_baht:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô")
            return
        
        amount = int(float(amount_baht) * 100)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô satang
        
        description = input("üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (default: Car wash payment): ").strip()
        if not description:
            description = "Car wash payment"
        
        print("\nüí≥ Payment Method:")
        print("1. QR_PROMPT_PAY (default)")
        payment_method_choice = input("üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1): ").strip() or "1"
        
        payment_method = PaymentMethod.QR_PROMPT_PAY
        
        print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á payment...")
        # Auto listen with 8 seconds timeout
        result = simulator.create_payment(
            amount=amount, 
            payment_method=payment_method, 
            description=description,
            auto_listen=True,
            timeout=15
        )
        
        if result:
            print("\n‚úÖ Payment session ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")
        
    except ValueError:
        print("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


def handle_listen_payment_status(simulator: PaymentDeviceSimulator):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ command listen payment status"""
    print("\nüì° Listen Payment Status (MQTT)")
    print("-" * 40)
    
    charge_id = input("üí≥ Charge ID: ").strip()
    if not charge_id:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Charge ID")
        return
    
    timeout_str = input("‚è±Ô∏è  Timeout (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ, default: 120): ").strip() or "120"
    try:
        timeout = int(timeout_str)
    except ValueError:
        timeout = 120
    
    status = simulator.listen_payment_status(charge_id, timeout)
    
    if status:
        print(f"\n‚úÖ Payment Status: {status}")
    else:
        print("\n‚è∞ Timeout - ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö payment status")


def handle_check_payment_status(simulator: PaymentDeviceSimulator):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ command check payment status"""
    print("\nüîç Check Payment Status (HTTP)")
    print("-" * 40)
    
    charge_id = input("üí≥ Charge ID: ").strip()
    if not charge_id:
        if simulator.last_charge_id:
            use_last = input(f"üí° ‡πÉ‡∏ä‡πâ Charge ID ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ({simulator.last_charge_id})? (y/n): ").strip().lower()
            if use_last == 'y':
                charge_id = simulator.last_charge_id
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Charge ID")
                return
        else:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà Charge ID")
            return
    
    result = simulator.check_payment_status(charge_id)


def handle_create_and_listen(simulator: PaymentDeviceSimulator):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ command create payment ‡πÅ‡∏•‡∏∞ listen status"""
    print("\nüîÑ Create Payment & Listen Status")
    print("-" * 40)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MQTT connection
    if not simulator.mqtt_connected:
        print("üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker...")
        if not simulator.connect_mqtt():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT broker ‡πÑ‡∏î‡πâ")
            return
    
    try:
        amount_baht = input("üíµ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó): ").strip()
        if not amount_baht:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô")
            return
        
        amount = int(float(amount_baht) * 100)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô satang
        
        description = input("üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (default: Car wash payment): ").strip()
        if not description:
            description = "Car wash payment"
        
        timeout_str = input("‚è±Ô∏è  Timeout (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ, default: 120): ").strip() or "120"
        timeout = int(timeout_str)
        
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á payment
        print("\nüìç Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á payment...")
        result = simulator.create_payment(amount, PaymentMethod.QR_PROMPT_PAY, description)
        
        if not result:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á payment ‡πÑ‡∏î‡πâ")
            return
        
        payment_results = result['data'].get('payment_results', {})
        charge_id = payment_results.get('chargeId')
        
        if not charge_id:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Charge ID ‡πÉ‡∏ô response")
            return
        
        # 2. Listen payment status
        print(f"\nüìç Step 2: Listen payment status...")
        status = simulator.listen_payment_status(charge_id, timeout)
        
        if status:
            print(f"\n‚úÖ Payment {status}")
            
            if status == PaymentStatus.SUCCEEDED.value:
                print("üéâ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            elif status == PaymentStatus.FAILED.value:
                print("‚ùå ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            elif status == PaymentStatus.CANCELLED.value:
                print("üö´ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
        else:
            # 3. Fallback: Check payment status via HTTP
            print("\nüìç Step 3: Fallback - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payment status ‡∏ú‡πà‡∏≤‡∏ô HTTP...")
            simulator.check_payment_status(charge_id)
        
    except ValueError:
        print("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠ timeout ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


def handle_view_last_payment(simulator: PaymentDeviceSimulator):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ command view last payment"""
    print("\nüìä Last Payment Information")
    print("-" * 40)
    
    if simulator.last_payment_data:
        print(json.dumps(simulator.last_payment_data, indent=2, ensure_ascii=False))
        
        payment_results = simulator.last_payment_data.get('payment_results', {})
        charge_id = payment_results.get('chargeId')
        
        if charge_id:
            print(f"\nüí° Charge ID: {charge_id}")
    else:
        print("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payment")


def handle_connect_mqtt(simulator: PaymentDeviceSimulator):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ command connect MQTT"""
    print("\nüîó Connect MQTT Broker")
    print("-" * 40)
    
    if simulator.mqtt_connected:
        print("‚úÖ MQTT broker ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
    else:
        simulator.connect_mqtt()


def handle_disconnect_mqtt(simulator: PaymentDeviceSimulator):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ command disconnect MQTT"""
    print("\nüîå Disconnect MQTT Broker")
    print("-" * 40)
    
    simulator.disconnect_mqtt()


def handle_change_settings():
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ command change settings"""
    print("\n‚öôÔ∏è  Change Settings")
    print("-" * 40)
    
    print("üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà")
    print("üìã ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
    
    return {
        'device_id': input("üÜî Device ID (Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°): ").strip(),
        'api_base_url': input("üåê API Base URL (Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°): ").strip(),
        'mqtt_broker': input("üì° MQTT Broker (Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°): ").strip(),
        'mqtt_port': input("üîå MQTT Port (Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°): ").strip()
    }


def main():
    """Main function"""
    print("üí≥ CatCar Wash Service - Payment Device Simulator")
    print("=" * 60)
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    device_id = input("üÜî Device ID: ").strip()
    if not device_id:
        print("‚ùå Device ID ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ")
        return
    
    api_base_url = input("üåê API Base URL (default: http://localhost:3000/api/v1): ").strip()
    if not api_base_url:
        api_base_url = "http://localhost:3000/api/v1"
    
    mqtt_broker = input("üì° MQTT Broker (default: localhost): ").strip()
    if not mqtt_broker:
        mqtt_broker = "localhost"
    
    mqtt_port_str = input("üîå MQTT Port (default: 1883): ").strip()
    mqtt_port = int(mqtt_port_str) if mqtt_port_str else 1883
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á simulator
    simulator = PaymentDeviceSimulator(
        device_id=device_id,
        api_base_url=api_base_url,
        mqtt_broker=mqtt_broker,
        mqtt_port=mqtt_port
    )
    
    print("\n‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    try:
        while True:
            show_menu(device_id)
            choice = input("üëâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (1-9): ").strip()
            
            if choice == "1":
                handle_create_payment(simulator)
            elif choice == "2":
                handle_listen_payment_status(simulator)
            elif choice == "3":
                handle_check_payment_status(simulator)
            elif choice == "4":
                handle_create_and_listen(simulator)
            elif choice == "5":
                handle_view_last_payment(simulator)
            elif choice == "6":
                handle_connect_mqtt(simulator)
            elif choice == "7":
                handle_disconnect_mqtt(simulator)
            elif choice == "8":
                new_settings = handle_change_settings()
                if any(new_settings.values()):
                    print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà")
            elif choice == "9":
                print("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                break
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-9")
            
            # Pause
            if choice not in ["9"]:
                input("\n‚è∏Ô∏è  ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...")
    
    except KeyboardInterrupt:
        print("\n\nüëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    finally:
        # Cleanup
        simulator.disconnect_mqtt()


if __name__ == "__main__":
    main()

