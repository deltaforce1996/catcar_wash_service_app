# =============================================================================
# Production Multi-stage Dockerfile for Nuxt 3 Frontend
# =============================================================================
# This Dockerfile creates an optimized production image with:
# - Nuxt 3 SSR disabled (SPA mode) for static generation
# - Minimal security footprint with non-root user
# - Alpine Linux for minimal image size
# - Runtime configuration support via environment variables

# =============================================================================
# BUILD STAGE - Compile and build the Nuxt application
# =============================================================================
FROM node:20-alpine AS base

# Install pnpm package manager globally
RUN npm install -g pnpm

# Set the working directory inside the container
WORKDIR /app

# Copy package management files for dependency installation
COPY package.json pnpm-lock.yaml ./

# Install all dependencies (including dev dependencies needed for building)
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build the Nuxt application for production
# This generates the .output directory with the production build
RUN pnpm run build

# =============================================================================
# PRODUCTION STAGE - Create optimized runtime image
# =============================================================================
FROM node:20-alpine AS production

# Add image metadata
LABEL maintainer="CatCar Wash Service"
LABEL description="Nuxt 3 Frontend for CatCar Wash Service - Production"
LABEL version="1.0.0"

# Install pnpm globally in production image
RUN npm install -g pnpm

# Install curl for healthcheck
RUN apk add --no-cache curl

# Set working directory for production stage
WORKDIR /app

# Copy package files to install production dependencies
COPY package.json pnpm-lock.yaml ./

# Install production dependencies only
RUN pnpm install --frozen-lockfile --prod

# Copy the built application from build stage
# Nuxt 3 builds everything into .output directory
COPY --from=base /app/.output ./.output

# Copy public directory (static assets)
COPY --from=base /app/public ./public

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Create a non-root user group for enhanced security
RUN addgroup -g 1001 -S nodejs

# Create a non-root user for running the application
RUN adduser -S nuxt -u 1001

# Change ownership of the application directory to the nuxt user
RUN chown -R nuxt:nodejs /app

# Switch to the non-root user for running the application
USER nuxt

# =============================================================================
# RUNTIME CONFIGURATION
# =============================================================================
# Expose port 3000 for external connections
EXPOSE 3000

# Set environment to production
ENV NODE_ENV=production

# Set Nuxt host to listen on all interfaces (required for Docker)
ENV NITRO_HOST=0.0.0.0
ENV NITRO_PORT=3000

# Healthcheck to verify the application is running
# Nuxt doesn't have a default health endpoint, so we check the root
HEALTHCHECK --interval=30s --timeout=10s --retries=3 --start-period=40s \
  CMD curl -f http://localhost:3000/ || exit 1

# Start the Nuxt application
# Nuxt 3 builds a standalone server in .output/server/index.mjs
CMD ["node", ".output/server/index.mjs"]
