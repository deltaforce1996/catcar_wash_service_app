# =============================================================================
# Production Multi-stage Dockerfile for NestJS Backend with Prisma
# =============================================================================
# This Dockerfile creates an optimized production image with:
# - Prisma migrations (migrate deploy)
# - Production database seeding (essential data only)
# - Minimal security footprint with non-root user
# - Alpine Linux for minimal image size

# =============================================================================
# BUILD STAGE - Compile and build the application
# =============================================================================
FROM node:20-alpine AS base

# Install pnpm package manager globally
RUN npm install -g pnpm

# Set the working directory inside the container
WORKDIR /app

# Copy package management files for dependency installation
COPY package.json pnpm-lock.yaml ./

# Install all dependencies (including dev dependencies needed for building)
RUN pnpm install --frozen-lockfile

# Copy Prisma schema and migration files
COPY prisma ./prisma

# Copy source code
COPY . .

# Generate Prisma client based on schema
RUN pnpm prisma generate

# Build the NestJS application for production
RUN pnpm run build

# =============================================================================
# PRODUCTION STAGE - Create optimized runtime image
# =============================================================================
FROM node:20-alpine AS production

# Install pnpm globally in production image
RUN npm install -g pnpm

# Set working directory for production stage
WORKDIR /app

# Copy package files to install production dependencies
COPY package.json pnpm-lock.yaml ./

# Install production dependencies plus ts-node and typescript for seed script
# ts-node and typescript are required to run the TypeScript seed file
RUN pnpm install --frozen-lockfile --prod && \
    pnpm add ts-node typescript @types/node --save-dev

# Copy Prisma schema and source files (needed for seeding)
COPY --from=base /app/prisma ./prisma
COPY --from=base /app/src ./src
COPY --from=base /app/tsconfig.json ./tsconfig.json

# Generate Prisma client for production runtime
RUN pnpm prisma generate

# Copy the built application from build stage
COPY --from=base /app/dist ./dist

# Copy public directory containing static files
COPY --from=base /app/public ./public

# Create production startup script
# This script runs migrations and production seeding before starting the app
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'echo "============================================================"' >> /app/start.sh && \
    echo 'echo "Starting CatCar Wash Service - Production Mode"' >> /app/start.sh && \
    echo 'echo "============================================================"' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'echo "Waiting for database connection..."' >> /app/start.sh && \
    echo 'sleep 3' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'echo "Running Prisma migrations..."' >> /app/start.sh && \
    echo 'pnpm prisma migrate deploy' >> /app/start.sh && \
    echo 'if [ $? -ne 0 ]; then' >> /app/start.sh && \
    echo '  echo "ERROR: Migration failed! Check DATABASE_URL and database connection."' >> /app/start.sh && \
    echo '  exit 1' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'echo "Seeding database (production mode - essential data only)..."' >> /app/start.sh && \
    echo 'NODE_ENV=production pnpm prisma db seed' >> /app/start.sh && \
    echo 'if [ $? -ne 0 ]; then' >> /app/start.sh && \
    echo '  echo "WARNING: Seeding failed but continuing..."' >> /app/start.sh && \
    echo 'fi' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'echo "Starting NestJS application..."' >> /app/start.sh && \
    echo 'exec node dist/src/main.js' >> /app/start.sh && \
    chmod +x /app/start.sh

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Create a non-root user group for enhanced security
RUN addgroup -g 1001 -S nodejs

# Create a non-root user for running the application
RUN adduser -S nestjs -u 1001

# Change ownership of the application directory to the nestjs user
RUN chown -R nestjs:nodejs /app

# Switch to the non-root user for running the application
USER nestjs

# =============================================================================
# RUNTIME CONFIGURATION
# =============================================================================
# Expose port 3000 for external connections
EXPOSE 3000

# Note: NODE_ENV is set via docker-compose environment variables
# This allows flexibility while the seed script ensures production mode

# Start the application with migrations and seeding
CMD ["/app/start.sh"]

